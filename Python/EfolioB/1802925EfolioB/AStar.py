import heapq


class Node:
    def __init__(self, node_id):
        self.id = node_id
        self.x = 0
        self.y = 0


class Graph:
    def __init__(self, size):
        self.adj = []
        self.nodes = [Node(i) for i in range(size)]

    def add_edge(self, from_node, to_node, cost):
        if cost != 0:
            if from_node.id not in self.adj:
                self.adj[from_node.id] = []
            self.adj[from_node.id].append((to_node, cost))

    def load_from_matrix(self, matrix):
        size = len(matrix)
        for i in range(size):
            for j in range(size):
                self.add_edge(self.nodes[i], self.nodes[j], matrix[i][j])

    def get_neighbors(self, node):
        return self.adj.get(node.id, [])


class AStarSearch:
    def __init__(self, graph, start, goal):
        self.graph = graph
        self.start = start
        self.goal = goal
        self.open_set = []
        heapq.heappush(self.open_set, (0, start))
        self.g_score = [start.id: 0]
        self.came_from = []

    def heuristic(self, a, b):
        return abs(a.id - b.id)

    def reconstruct_path(self, current):
        path = []
        while current is not None:
            path.append(current)
            current = self.came_from.get(current.id)
        path.reverse()
        return path

    def search(self):
        while self.open_set:
            current = heapq.heappop(self.open_set)[1]

            if current == self.goal:
                path = self.reconstruct_path(current)
                print(" -> ".join(str(node.id) for node in path) + " chegou ao destino")
                return

            for neighbor, cost in self.graph.get_neighbors(current):
                tentative_g_score = self.g_score[current.id] + cost

                if tentative_g_score < self.g_score.get(neighbor.id, float('inf')):
                    self.came_from[neighbor.id] = current
                    self.g_score[neighbor.id] = tentative_g_score
                    f_score = tentative_g_score + self.heuristic(neighbor, self.goal)
                    heapq.heappush(self.open_set, (f_score, neighbor))


# Lista de instÃ¢ncias das matrizes fornecidas
instances = [

                # 5x5
                [
                [0,7,0,0,4],
                [0,0,0,4,0],
                [1,0,0,0,0],
                [4,4,1,0,0],
                [6,0,3,4,4],
                ],
                [
                [4,0,0,10,1],
                [1,0,0,0,0],
                [0,0,1,6,3],
                [0,4,0,0,2],
                [8,0,6,3,0],
                ],
                #7x7
                [
                [0,8,0,4,5,10,0],
                [0,4,0,7,0,4,0],
                [0,2,4,2,0,0,2],
                [0,7,0,1,2,0,0],
                [2,4,0,0,3,0,2],
                [0,4,0,0,3,0,0],
                [2,0,0,0,0,0,0],
                ],
                [
                [0,0,1,0,7,0,1],
                [0,1,4,0,0,0,4],
                [0,0,0,0,2,0,0],
                [3,1,0,8,5,7,7],
                [0,4,0,3,0,0,0],
                [0,0,0,3,2,4,2],
                [0,8,3,6,3,0,0],
                ],
                # 9x9
                [
                [6,7,2,0,0,0,0,0,0],
                [3,3,6,0,8,4,3,1,0],
                [0,0,8,0,0,0,2,4,0],
                [0,0,0,1,0,3,2,0,0],
                [0,0,0,7,4,0,1,0,0],
                [12,8,0,5,4,1,4,3,4],
                [8,0,1,2,4,3,3,0,0],
                [1,1,0,0,0,0,5,0,0],
                [4,0,0,0,4,6,0,13,2],
                ],
                [
                [0,0,0,0,0,0,0,0,0],
                [4,0,8,4,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0],
                [0,0,0,0,3,0,0,1,0],
                [0,3,0,0,0,0,0,0,0],
                [0,0,0,1,1,0,0,3,0],
                [0,0,2,4,0,0,0,1,0],
                [0,2,0,0,8,0,4,3,10],
                [0,0,3,0,0,4,0,0,0],
                ],
                # 11x11
                [
                [0,0,0,0,0,3,0,0,0,0,0],
                [0,0,11,2,0,0,9,3,0,0,3],
                [0,0,0,3,1,0,2,0,0,0,0],
                [4,1,2,3,0,4,0,0,4,0,0],
                [5,0,0,0,4,0,1,0,4,3,0],
                [0,0,0,7,4,0,1,0,0,7,0],
                [0,8,0,0,0,0,3,0,1,0,3],
                [0,3,0,0,5,2,3,0,0,0,2],
                [0,0,0,3,1,0,2,8,0,0,0],
                [0,3,4,0,7,0,0,7,0,0,0],
                [4,2,0,4,0,3,0,0,5,7,0],
                ],
                [
                [1,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0],
                [0,0,10,10,0,0,0,4,5,0,0],
                [0,4,1,0,8,0,0,0,0,0,5],
                [8,0,0,0,0,0,6,0,0,0,0],
                [0,0,0,0,13,0,0,0,2,0,3],
                [0,0,0,0,4,0,0,0,0,1,0],
                [0,0,0,0,0,0,0,0,0,0,0],
                [0,0,4,0,0,0,0,3,0,0,0],
                [4,1,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0],
                ],
                #13x13
                [
                [2,4,0,0,6,7,3,4,0,0,3,0,1],
                [0,0,2,0,3,0,0,6,0,0,8,11,3],
                [0,3,0,8,0,0,2,0,0,0,0,0,4],
                [2,0,0,0,0,0,0,0,0,3,2,0,0],
                [0,6,0,8,0,3,0,0,0,0,0,0,1],
                [0,3,0,2,0,0,9,0,0,0,0,5,6],
                [1,9,4,0,0,2,4,0,0,0,3,2,0],
                [2,3,0,4,0,0,0,6,2,0,1,0,3],
                [0,0,0,0,0,6,0,0,0,2,2,0,8],
                [7,2,4,2,0,0,6,4,1,0,0,0,7],
                [0,0,0,11,0,0,0,0,3,4,0,9,0],
                [0,0,0,0,1,4,3,4,0,0,0,3,11],
                [0,0,4,7,7,0,0,2,0,2,5,0,1],
                ],
                [
                [0,0,1,4,0,0,9,0,0,0,12,0,1],
                [0,0,0,0,0,0,0,0,0,1,0,0,0],
                [1,0,0,0,0,0,2,0,0,2,0,0,0],
                [0,0,0,0,0,9,4,0,0,0,6,0,0],
                [0,6,9,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,1,6,10,0,1,4],
                [0,3,0,0,0,1,0,0,0,0,0,2,0],
                [0,0,0,1,3,0,0,0,0,9,0,0,0],
                [9,0,0,3,3,0,0,0,0,3,4,0,0],
                [0,1,4,0,0,0,0,0,0,5,0,1,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0],
                [2,0,0,0,0,3,3,0,0,0,0,0,10],
                [0,0,0,0,0,0,0,0,0,4,0,0,0],
                ],
                # 15x13
                [
                [ 0,0,0,4,0,0,0,6,0,0,0,0,2,2,0],
                [ 0,2,12,0,3,0,0,0,0,26,0,0,0,0,4 ],
                [ 0,0,0,0,0,0,0,0,0,0,0,0,2,2,0 ],
                [ 0,0,0,0,0,0,0,3,3,1,0,0,0,0,0 ],
                [ 0,0,0,0,0,1,3,0,0,6,4,0,0,0,0 ],
                [ 0,0,0,0,0,0,0,5,4,0,0,3,0,0,0 ],
                [ 9,12,0,0,0,4,1,6,0,0,0,0,0,0,0 ],
                [ 0,0,0,0,0,0,0,0,4,0,0,0,0,0,0 ],
                [ 0,3,0,0,0,2,0,0,0,7,0,4,0,0,0 ],
                [ 0,0,2,0,0,9,2,0,0,0,0,0,0,0,0 ],
                [ 0,2,0,0,2,16,0,8,0,2,0,0,0,0,7 ],
                [ 0,0,5,0,6,0,0,0,0,0,8,0,0,0,0 ],
                [ 0,4,0,0,0,0,0,0,1,2,3,0,0,0,0 ],
                ],
                [
                [0,0,0,0,0,0,0,10,3,0,0,0,0,2,0],
                [0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],
                [0,1,0,3,0,0,0,0,4,0,0,0,4,0,0],
                [0,0,0,10,3,8,11,0,0,0,0,0,2,0,0],
                [0,4,0,0,0,0,0,0,0,0,0,2,0,0,1],
                [0,4,2,0,0,0,4,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,5,0,10,0,0,1,0,0],
                [0,0,0,0,0,0,0,0,3,0,0,2,8,0,15],
                [0,1,0,0,0,0,0,0,0,0,0,0,11,0,0],
                [0,0,0,0,0,3,0,0,0,0,0,1,0,2,0],
                [0,0,0,11,0,0,0,0,0,0,0,0,0,0,2],
                [8,0,0,0,0,4,0,0,0,0,0,4,2,0,4],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,8,1],
                ],
                #/ 17x13
                [
                [0,0,0,3,0,0,0,0,5,0,0,0,0,0,0,0,0],
                [0,0,0,0,3,0,0,0,4,2,0,3,0,0,0,0,0],
                [6,0,3,0,0,0,6,0,30,0,1,8,6,10,0,0,0],
                [0,7,0,1,4,0,0,1,0,0,0,0,0,0,0,4,4],
                [0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,3],
                [0,8,0,0,0,0,0,3,0,0,36,0,1,0,0,2,0],
                [6,0,0,0,8,2,8,0,0,2,0,0,0,0,0,0,0],
                [8,1,0,0,0,0,4,1,0,0,0,0,0,6,7,0,0],
                [3,5,0,0,0,0,0,0,0,0,5,0,0,4,0,0,1],
                [3,0,0,2,0,4,0,0,0,0,9,0,0,0,8,16,24],
                [0,1,0,0,1,1,0,0,2,0,0,0,0,0,6,1,0],
                [0,3,4,0,3,4,0,10,0,0,0,0,5,5,8,4,4],
                [8,0,0,0,0,0,17,0,0,10,0,2,0,0,2,0,0],
                ],

                [
                [0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,1,4,0,0,0],
                [0,6,0,0,0,0,8,0,10,0,0,0,0,2,2,3,0],
                [0,0,0,0,0,4,0,8,3,0,0,0,0,0,0,0,0],
                [0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0],
                [4,0,8,1,0,0,7,0,0,0,0,0,5,3,0,0,0],
                [0,0,3,0,1,0,0,3,0,0,3,0,3,0,8,0,0],
                [0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,1,0],
                [0,6,0,0,0,0,0,1,0,2,0,1,0,0,0,0,0],
                [0,0,2,0,1,3,0,1,0,4,0,0,6,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0],
                [4,8,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0],
                [4,0,0,0,0,0,0,0,0,0,0,0,3,0,0,6,3],
                ],
                # 19x13
                [
                [0,0,0,0,4,0,0,4,0,0,8,0,6,0,0,0,0,0,4],
                [0,0,0,0,0,2,0,6,0,0,0,0,0,0,0,0,0,3,1],
                [2,0,8,3,0,0,0,5,0,4,0,0,0,0,0,2,1,4,0],
                [0,0,1,0,4,0,0,0,0,0,0,1,0,0,0,18,10,0,0],
                [0,0,1,0,0,0,0,3,0,2,0,0,0,7,4,0,0,4,3],
                [0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,3,2,0,2],
                [0,0,0,1,0,1,0,0,0,2,2,0,0,4,0,0,10,1,0],
                [3,0,0,0,0,0,0,4,1,0,0,0,0,0,4,0,0,1,0],
                [2,0,2,0,0,0,0,1,0,0,4,1,0,3,0,0,0,3,3],
                [0,0,0,0,4,0,1,1,3,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,4,0,0,4,2,4,0,0,0,0,0,0,4,0,0,0],
                [0,0,2,0,3,22,0,0,0,0,0,2,7,0,0,0,0,0,1],
                [0,9,0,0,6,0,0,0,0,0,0,0,0,0,5,1,4,0,8],
                ],
                [
                [0,0,0,0,0,0,0,3,0,0,0,2,0,4,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0],
                [5,0,0,3,0,0,0,0,0,0,0,2,1,0,0,0,0,0,0],
                [0,0,4,0,0,0,0,0,14,0,0,0,0,2,0,7,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,2],
                [0,0,3,3,0,0,0,0,0,3,0,0,0,0,0,0,2,0,0],
                [5,0,0,0,0,0,6,0,2,2,0,0,0,0,0,0,0,0,0],
                [0,0,2,0,0,0,0,0,4,0,0,5,0,0,0,0,0,4,1],
                [3,0,4,0,0,0,0,0,0,0,0,7,2,0,0,0,1,0,3],
                [0,0,1,0,0,4,11,0,3,0,0,0,0,11,3,0,0,0,0],
                [1,0,2,8,0,0,0,0,0,0,4,0,0,3,1,0,0,0,0],
                [3,0,11,0,0,0,0,0,0,0,0,0,0,3,0,7,0,0,0],
                [0,0,0,0,0,2,0,0,0,4,0,0,0,0,0,0,0,1,0],
                ],
                # 19x15
                [
                [0,0,0,0,0,0,0,0,16,1,0,5,0,3,0,0,0,4,0],
                [0,2,3,0,0,5,0,0,0,0,0,0,0,6,0,0,0,1,0],
                [0,9,1,0,0,0,0,4,2,2,0,1,8,2,0,4,24,10,13],
                [0,0,3,0,0,0,0,2,0,0,4,0,11,0,0,0,2,1,1],
                [0,4,0,1,0,0,0,0,0,0,0,0,0,0,0,4,0,0,2],
                [0,3,12,0,4,0,0,0,0,0,0,0,10,0,0,0,0,0,0],
                [0,0,2,0,0,0,9,0,0,0,0,0,8,4,0,0,0,0,0],
                [3,0,0,0,0,2,0,0,6,0,3,0,6,0,0,0,0,0,0],
                [1,0,0,0,0,0,0,2,5,0,0,12,2,4,0,0,7,0,1],
                [6,4,4,0,0,8,0,3,2,0,0,0,9,0,0,0,0,0,0],
                [0,0,0,0,0,0,4,8,0,0,2,0,0,8,0,0,0,0,2],
                [0,4,18,0,0,0,0,0,0,0,4,1,2,0,0,0,0,8,3],
                [2,0,7,0,7,0,0,9,0,0,0,0,0,0,0,2,0,0,0],
                [0,0,0,0,7,2,0,0,1,0,0,0,0,0,0,11,0,30,0],
                [1,0,0,0,0,0,0,7,0,0,0,3,0,0,0,0,0,0,0],
                ],
                [
                [0,0,0,0,14,0,0,0,0,0,0,0,3,7,0,0,0,0,0],
                [0,2,5,7,2,0,0,0,6,0,0,0,1,0,0,3,0,0,1],
                [0,7,0,2,0,0,0,0,0,0,0,10,0,0,4,2,0,0,0],
                [0,0,0,4,0,0,0,5,0,0,0,0,0,0,0,0,0,2,0],
                [0,0,5,0,4,0,0,3,4,0,0,0,3,0,0,0,0,7,0],
                [0,0,0,0,0,0,3,0,6,0,0,5,0,4,0,0,0,0,0],
                [2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,3,0],
                [0,0,7,0,4,0,0,0,0,0,1,0,0,0,8,0,0,0,0],
                [4,0,0,0,0,0,0,0,7,0,7,0,0,0,0,0,8,0,3],
                [8,0,0,0,0,0,2,6,2,0,0,0,0,0,3,0,0,0,0],
                [0,0,0,0,0,0,0,12,0,0,0,4,0,0,8,0,0,0,0],
                [0,0,4,0,0,0,0,0,0,13,0,2,0,0,0,0,0,1,0],
                [0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,3,0,2,0],
                [0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,7,0],
                [0,0,0,0,0,0,4,0,0,0,2,0,0,0,0,0,2,0,3],
                ],
                # 19x17
                [
                [0,2,0,0,0,4,4,0,0,4,0,0,1,6,0,1,4,0,0],
                [1,0,0,2,0,0,0,0,0,0,0,0,9,3,0,0,0,0,0],
                [3,0,0,4,0,9,1,0,0,1,0,0,0,6,0,0,0,0,0],
                [0,4,0,0,4,4,0,0,0,0,0,0,12,0,0,0,0,1,0],
                [0,0,0,3,0,6,0,0,0,0,3,0,0,11,17,0,0,0,0],
                [6,0,1,0,0,6,0,0,1,0,0,0,0,0,0,0,0,0,0],
                [0,1,0,1,0,0,0,0,0,0,6,0,0,1,0,0,0,2,0],
                [1,0,10,0,0,2,2,0,3,4,8,0,0,9,11,1,0,16,0],
                [3,0,0,0,0,0,0,0,4,0,0,7,0,0,7,0,0,0,0],
                [0,6,0,1,0,0,0,0,3,5,0,0,2,4,0,0,0,0,0],
                [0,0,0,0,0,6,0,3,6,0,10,6,0,0,0,0,0,0,2],
                [3,0,0,4,4,0,2,0,0,0,1,0,0,1,2,16,11,0,0],
                [7,0,0,3,0,0,0,0,0,10,12,0,0,0,0,0,0,0,0],
                [0,2,0,0,0,0,2,2,0,0,0,0,0,0,0,4,1,0,1],
                [0,0,0,0,0,0,0,1,2,6,3,0,0,0,0,0,7,0,0],
                [0,0,1,0,4,8,0,0,0,0,0,6,0,0,0,6,0,0,0],
                [0,0,0,0,0,0,0,2,0,2,0,0,0,7,0,0,0,0,2],
                ],
                [
                [3,4,0,0,3,0,0,0,0,6,0,4,4,0,0,0,4,0,0],
                [4,0,0,5,0,0,0,0,7,3,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,1,0],
                [0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0],
                [0,1,4,0,0,0,0,0,0,0,0,2,0,0,0,0,9,0,0],
                [0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,0,4,0],
                [4,0,0,5,0,0,0,0,0,0,0,11,0,0,0,0,0,3,0],
                [2,0,7,0,0,11,0,0,0,0,0,0,5,0,7,0,0,0,0],
                [9,0,0,0,1,0,1,15,0,0,0,0,1,0,0,0,1,4,3],
                [0,3,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0],
                [0,0,2,4,0,0,0,0,0,0,0,0,4,0,1,0,0,0,0],
                [0,2,0,0,0,7,0,4,0,0,0,0,0,0,0,0,0,9,0],
                [0,0,6,0,0,0,2,0,1,0,0,0,0,0,0,0,0,1,0],
                [3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,3],
                [0,0,0,0,0,1,0,0,0,0,0,0,9,0,0,0,7,0,0],
                [0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0],
                [0,0,0,0,0,0,0,0,6,3,0,0,0,0,0,0,1,0,0],
                ],
            ],






# CriaÃ§Ã£o de uma funÃ§Ã£o para processar mÃºltiplas instÃ¢ncias de matrizes
def process_graph_instances(instances):
    for idx, matrices in enumerate(instances):
        print(f"Processing instance [idx + 1] with size [len(matrices[0])]x[len(matrices[0])]")
        graph = Graph(len(matrices[0]))
        graph.load_from_matrix(matrices[0])
        start = graph.nodes[0]
        goal = graph.nodes[len(matrices[0]) - 1]
        a_star = AStarSearch(graph, start, goal)
        a_star.search()
        print()


process_graph_instances(instances)
